def gradleVer = "4"
if (gradle.gradleVersion.startsWith("6")
        || gradle.gradleVersion.startsWith("5")
        || gradle.gradleVersion.startsWith("4.10")
        || gradle.gradleVersion.startsWith("4.9")
        || gradle.gradleVersion.startsWith("4.8")
        || gradle.gradleVersion.startsWith("4.7")) {
    println "Gradle with version >= 4.7 detected"
    gradleVer = "5"
} else {
    println "Gradle with version < 4.7 detected"
}

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

version = "1.4.0"

// Specify JDK version - may vary in different scenarios
sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'
// In this section you declare where to find the dependencies of your project
repositories {
    maven {
        url "http://maven.aliyun.com/nexus/content/groups/public/"
    }
    maven { url "https://dl.bintray.com/ethereum/maven/" }
    mavenLocal()
    mavenCentral()
}

List lombok = [
        'org.projectlombok:lombok:1.18.10'
]

List logger = [
        "org.slf4j:jcl-over-slf4j:1.7.12",
        "com.lmax:disruptor:3.3.7"
]

def spring_version = "4.3.16.RELEASE"
List spring = [
        "org.springframework:spring-core:$spring_version",
        "org.springframework:spring-beans:$spring_version",
        "org.springframework:spring-context:$spring_version",
        "org.springframework:spring-tx:$spring_version",
        "org.springframework:spring-jdbc:$spring_version",
        "org.springframework:spring-test:$spring_version",
        "org.springframework:spring-context-support:$spring_version",
        "org.springframework:spring-web:$spring_version",
        "org.springframework:spring-webmvc:$spring_version"
]

def spring_boot_version = "1.5.12.RELEASE"
List spring_boot = [
        "org.springframework.boot:spring-boot-starter-web:$spring_boot_version",
        "org.springframework.boot:spring-boot-autoconfigure:$spring_boot_version",
        "org.springframework.boot:spring-boot-configuration-processor:$spring_boot_version",
        "org.springframework.boot:spring-boot-starter-log4j2:$spring_boot_version",
        "org.springframework.boot:spring-boot-starter-aop:$spring_boot_version"
]

List spring_boot_test = [
        "org.springframework.boot:spring-boot-starter-test:$spring_boot_version"
]

// junit test
List junit = [
        "junit:junit:4.12",
        "org.springframework:spring-test:$spring_version"
]

List apache_commons = [
        "org.apache.commons:commons-collections4:4.1",
        "org.apache.commons:commons-lang3:3.5",
        "commons-cli:commons-cli:1.3.1"
]

// In this section you declare the dependencies for your production and test code
List jackson = [
        "com.fasterxml.jackson.core:jackson-databind:2.8.8.1",
        'io.netty:netty-all:4.1.15.Final',
        'io.netty:netty-tcnative:2.0.0.Final',
        'com.github.fge:json-schema-validator:2.2.6',
        'org.apache.httpcomponents:httpclient:4.5.2',
        "com.github.reinert:jjschema:1.16",
        "com.google.zxing:core:3.3.0"
]

List weid_java_sdk = [
        'com.webank:weid-java-sdk:1.5.0',
        'org.fisco-bcos:web3sdk:2.2.2'
]

List pdfbox = [
        'org.apache.pdfbox:pdfbox:2.0.16'
]

List rpc = [
        'org.smartboot.socket:aio-core:1.4.2',
        'org.smartboot.socket:aio-pro:1.4.2'
]

// In this section you declare the dependencies for your production and test code
dependencies {
    compile logger, spring, apache_commons, jackson, spring_boot, rpc, pdfbox
    testCompile logger, spring, junit, spring_boot, spring_boot_test, rpc, pdfbox
    // Check SDK pipeline dependency
    if (file("./dependencies/weid-java-sdk-pipeline.jar").exists()) {
        println "Pipeline jar for WeIdentity Java SDK found."
        compile files('./dependencies/weid-java-sdk-pipeline.jar')
        testCompile files('./dependencies/weid-java-sdk-pipeline.jar')
    } else {
        println "No pipeline jar found for WeIdentity Java SDK, using gradle version.."
        compile weid_java_sdk
        testCompile weid_java_sdk
    }
    compile("com.webank:weid-contract-java:1.2.12") {
        exclude group:"org.slf4j", module: "slf4j-log4j12"
    }
    testCompile("com.webank:weid-contract-java:1.2.12") {
        exclude group:"org.slf4j", module: "slf4j-log4j12"
    }
    compile files("lib/WeDPR-Java-SDK.jar")
    if (gradleVer.startsWith("4")) {
        compile lombok
        testCompile lombok
    }
    if (gradleVer.startsWith("5")) {
        compileOnly lombok
        annotationProcessor lombok
        testAnnotationProcessor lombok
        testCompileOnly lombok
    }
}

configurations {
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

jar {
    destinationDir file('dist/apps')
    archiveName project.name + '.jar'
    exclude '**/*.xml', '**/*.properties'

    doLast {
        copy {
            from file('src/main/resources/')
            into 'dist/conf'
        }
        copy {
            from file('script/')
            into 'dist'
        }
        copy {
            from configurations.runtime
            into 'dist/lib'
        }
        copy {
            from file('.').listFiles().findAll { File f -> (f.name.endsWith('.bat') || f.name.endsWith('.sh') || f.name.endsWith('.env')) }
            into 'dist'
        }
    }
}
